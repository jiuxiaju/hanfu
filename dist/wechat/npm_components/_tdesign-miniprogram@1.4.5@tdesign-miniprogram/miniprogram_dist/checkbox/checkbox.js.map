{"version":3,"file":"npm_components/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/checkbox/checkbox.js","mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../node_modules/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/checkbox/checkbox.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport Props from './props';\nconst { prefix } = config;\nconst name = `${prefix}-checkbox`;\nlet CheckBox = class CheckBox extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [\n            `${prefix}-class`,\n            `${prefix}-class-label`,\n            `${prefix}-class-icon`,\n            `${prefix}-class-content`,\n            `${prefix}-class-border`,\n        ];\n        this.behaviors = ['wx://form-field'];\n        this.relations = {\n            '../checkbox-group/checkbox-group': {\n                type: 'ancestor',\n                linked(parent) {\n                    const { value, disabled, borderless } = parent.data;\n                    const valueSet = new Set(value);\n                    const checkedFromParent = valueSet.has(this.data.value);\n                    const data = {\n                        _disabled: this.data.disabled == null ? disabled : this.data.disabled,\n                    };\n                    if (borderless) {\n                        data.borderless = true;\n                    }\n                    data.checked = this.data.checked || checkedFromParent;\n                    if (this.data.checked) {\n                        parent.updateValue(this.data);\n                    }\n                    if (this.data.checkAll) {\n                        data.checked = valueSet.size > 0;\n                    }\n                    this.setData(data);\n                },\n            },\n        };\n        this.options = {\n            multipleSlots: true,\n        };\n        this.properties = Object.assign(Object.assign({}, Props), { theme: {\n                type: String,\n                value: 'default',\n            } });\n        this.data = {\n            prefix,\n            classPrefix: name,\n            _disabled: false,\n        };\n        this.observers = {\n            disabled(v) {\n                this.setData({ _disabled: v });\n            },\n        };\n        this.controlledProps = [\n            {\n                key: 'checked',\n                event: 'change',\n            },\n        ];\n        this.methods = {\n            handleTap(e) {\n                const { _disabled, readonly, contentDisabled } = this.data;\n                const { target } = e.currentTarget.dataset;\n                if (_disabled || readonly || (target === 'text' && contentDisabled))\n                    return;\n                const { value, label } = this.data;\n                const checked = !this.data.checked;\n                const parent = this.$parent;\n                if (parent) {\n                    parent.updateValue(Object.assign(Object.assign({}, this.data), { checked }));\n                }\n                else {\n                    this._trigger('change', { context: { value, label }, checked });\n                }\n            },\n            setDisabled(disabled) {\n                this.setData({\n                    _disabled: this.data.disabled || disabled,\n                });\n            },\n        };\n    }\n};\nCheckBox = __decorate([\n    wxComponent()\n], CheckBox);\nexport default CheckBox;\n"],"names":[],"sourceRoot":""}