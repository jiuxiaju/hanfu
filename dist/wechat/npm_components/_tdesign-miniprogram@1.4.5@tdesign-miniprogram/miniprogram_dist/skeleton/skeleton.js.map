{"version":3,"file":"npm_components/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/skeleton/skeleton.js","mappingssources":["webpack:///../node_modules/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/skeleton/skeleton.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { isNumber, classNames } from '../common/utils';\nconst { prefix } = config;\nconst name = `${prefix}-skeleton`;\nconst ThemeMap = {\n    avatar: [{ type: 'circle', size: '96rpx' }],\n    image: [{ type: 'rect', size: '144rpx' }],\n    text: [\n        [\n            { width: '24%', height: '32rpx', marginRight: '32rpx' },\n            { width: '76%', height: '32rpx' },\n        ],\n        1,\n    ],\n    paragraph: [1, 1, 1, { width: '55%' }],\n};\nlet Skeleton = class Skeleton extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [`${prefix}-class`, `${prefix}-class-col`, `${prefix}-class-row`];\n        this.properties = props;\n        this.data = {\n            prefix,\n            classPrefix: name,\n            parsedRowcols: [],\n        };\n        this.observers = {\n            rowCol() {\n                this.init();\n            },\n            'loading, delay'() {\n                this.isShowSkeleton();\n            },\n        };\n        this.lifetimes = {\n            attached() {\n                this.init();\n                this.isShowSkeleton();\n            },\n        };\n        this.methods = {\n            init() {\n                const { theme, rowCol } = this.properties;\n                const rowCols = [];\n                if (rowCol.length) {\n                    rowCols.push(...rowCol);\n                }\n                else {\n                    rowCols.push(...ThemeMap[theme || 'text']);\n                }\n                const parsedRowcols = rowCols.map((item) => {\n                    if (isNumber(item)) {\n                        return [\n                            {\n                                class: this.getColItemClass({ type: 'text' }),\n                                style: {},\n                            },\n                        ];\n                    }\n                    if (Array.isArray(item)) {\n                        return item.map((col) => {\n                            return Object.assign(Object.assign({}, col), { class: this.getColItemClass(col), style: this.getColItemStyle(col) });\n                        });\n                    }\n                    const nItem = item;\n                    return [\n                        Object.assign(Object.assign({}, nItem), { class: this.getColItemClass(nItem), style: this.getColItemStyle(nItem) }),\n                    ];\n                });\n                this.setData({\n                    parsedRowcols,\n                });\n            },\n            getColItemClass(obj) {\n                return classNames([\n                    `${name}__col`,\n                    `${name}--type-${obj.type || 'text'}`,\n                    `${name}--animation-${this.properties.animation}`,\n                ]);\n            },\n            getColItemStyle(obj) {\n                const styleName = [\n                    'width',\n                    'height',\n                    'marginRight',\n                    'marginLeft',\n                    'margin',\n                    'size',\n                    'background',\n                    'backgroundColor',\n                    'borderRadius',\n                ];\n                const style = {};\n                styleName.forEach((name) => {\n                    if (name in obj) {\n                        const px = isNumber(obj[name]) ? `${obj[name]}px` : obj[name];\n                        if (name === 'size') {\n                            [style.width, style.height] = [px, px];\n                        }\n                        else {\n                            style[name] = px;\n                        }\n                    }\n                });\n                return style;\n            },\n            isShowSkeleton() {\n                const { loading, delay } = this.properties;\n                if (!loading || delay === 0) {\n                    this.setData({\n                        isShow: loading,\n                    });\n                    return;\n                }\n                setTimeout(() => {\n                    this.setData({\n                        isShow: loading,\n                    });\n                }, delay);\n            },\n        };\n    }\n};\nSkeleton = __decorate([\n    wxComponent()\n], Skeleton);\nexport default Skeleton;\n"],"names":[],"sourceRoot":""}