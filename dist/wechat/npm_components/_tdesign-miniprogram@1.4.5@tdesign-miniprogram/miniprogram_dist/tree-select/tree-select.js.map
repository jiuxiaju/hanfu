{"version":3,"file":"npm_components/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/tree-select/tree-select.js","mappingssources":["webpack:///../node_modules/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/tree-select/tree-select.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nconst { prefix } = config;\nconst name = `${prefix}-tree-select`;\nlet TreeSelect = class TreeSelect extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [`${prefix}-class`];\n        this.options = {\n            multipleSlots: true,\n        };\n        this.data = {\n            prefix,\n            classPrefix: name,\n        };\n        this.properties = props;\n        this.controlledProps = [\n            {\n                key: 'value',\n                event: 'change',\n            },\n        ];\n        this.observers = {\n            'value, options, keys, multiple'() {\n                this.buildTreeOptions();\n            },\n        };\n        this.methods = {\n            buildTreeOptions() {\n                const { options, value, multiple, keys } = this.data;\n                const treeOptions = [];\n                let level = -1;\n                let node = { children: options };\n                if (options.length === 0 || (Array.isArray(value) && value.length === 0))\n                    return;\n                while (node && node.children) {\n                    level += 1;\n                    const list = node.children.map((item) => ({\n                        label: item[(keys === null || keys === void 0 ? void 0 : keys.label) || 'label'],\n                        value: item[(keys === null || keys === void 0 ? void 0 : keys.value) || 'value'],\n                        children: item.children,\n                    }));\n                    const thisValue = value === null || value === void 0 ? void 0 : value[level];\n                    treeOptions.push([...list]);\n                    if (thisValue == null) {\n                        const [firstChild] = list;\n                        node = firstChild;\n                    }\n                    else {\n                        const child = list.find((child) => child.value === thisValue);\n                        node = child !== null && child !== void 0 ? child : list[0];\n                    }\n                }\n                const leafLevel = Math.max(0, level);\n                if (multiple) {\n                    const finalValue = this.data.value || this.data.defaultValue;\n                    if (finalValue[leafLevel] != null && !Array.isArray(finalValue[leafLevel])) {\n                        throw TypeError('应传入数组类型的 value');\n                    }\n                }\n                this.setData({\n                    leafLevel,\n                    treeOptions,\n                });\n            },\n            onRootChange(e) {\n                const { value } = this.data;\n                const { value: itemValue } = e.detail;\n                value[0] = itemValue;\n                this._trigger('change', { value, level: 0 });\n            },\n            handleTreeClick(e) {\n                const { level, value: itemValue } = e.currentTarget.dataset;\n                const { value } = this.data;\n                value[level] = itemValue;\n                this._trigger('change', { value, level: 1 });\n            },\n            handleRadioChange(e) {\n                const { value } = this.data;\n                const { value: itemValue } = e.detail;\n                const { level } = e.target.dataset;\n                value[level] = itemValue;\n                this._trigger('change', { value, level });\n            },\n        };\n    }\n};\nTreeSelect = __decorate([\n    wxComponent()\n], TreeSelect);\nexport default TreeSelect;\n"],"names":[],"sourceRoot":""}