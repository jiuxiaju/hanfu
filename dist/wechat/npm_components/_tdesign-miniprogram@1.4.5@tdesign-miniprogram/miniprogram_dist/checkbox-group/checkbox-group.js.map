{"version":3,"file":"npm_components/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/checkbox-group/checkbox-group.js","mappingssources":["webpack:///../node_modules/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/checkbox-group/checkbox-group.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nconst { prefix } = config;\nconst name = `${prefix}-checkbox-group`;\nlet CheckBoxGroup = class CheckBoxGroup extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [`${prefix}-class`];\n        this.relations = {\n            '../checkbox/checkbox': {\n                type: 'descendant',\n            },\n        };\n        this.data = {\n            prefix,\n            classPrefix: name,\n            checkboxOptions: [],\n        };\n        this.properties = props;\n        this.observers = {\n            value() {\n                this.updateChildren();\n            },\n            options() {\n                this.initWithOptions();\n            },\n            disabled(v) {\n                var _a;\n                if ((_a = this.data.options) === null || _a === void 0 ? void 0 : _a.length) {\n                    this.initWithOptions();\n                    return;\n                }\n                this.getChildren().forEach((item) => {\n                    item.setDisabled(v);\n                });\n            },\n        };\n        this.lifetimes = {\n            ready() {\n                this.setCheckall();\n            },\n        };\n        this.controlledProps = [\n            {\n                key: 'value',\n                event: 'change',\n            },\n        ];\n        this.$checkAll = null;\n        this.methods = {\n            getChildren() {\n                let items = this.$children;\n                if (!items.length) {\n                    items = this.selectAllComponents(`.${prefix}-checkbox-option`);\n                }\n                return items || [];\n            },\n            updateChildren() {\n                const items = this.getChildren();\n                const { value } = this.data;\n                if (items.length > 0) {\n                    items.forEach((item) => {\n                        !item.data.checkAll &&\n                            item.setData({\n                                checked: value === null || value === void 0 ? void 0 : value.includes(item.data.value),\n                            });\n                    });\n                    if (items.some((item) => item.data.checkAll)) {\n                        this.setCheckall();\n                    }\n                }\n            },\n            updateValue({ value, checked, checkAll, item, indeterminate }) {\n                let { value: newValue } = this.data;\n                const { max } = this.data;\n                const keySet = new Set(this.getChildren().map((item) => item.data.value));\n                newValue = newValue.filter((value) => keySet.has(value));\n                if (max && checked && newValue.length === max)\n                    return;\n                if (checkAll) {\n                    const items = this.getChildren();\n                    newValue =\n                        !checked && indeterminate\n                            ? items\n                                .filter(({ data }) => !(data.disabled && !newValue.includes(data.value)))\n                                .map((item) => item.data.value)\n                            : items\n                                .filter(({ data }) => {\n                                if (data.disabled) {\n                                    return newValue.includes(data.value);\n                                }\n                                return checked && !data.checkAll;\n                            })\n                                .map(({ data }) => data.value);\n                }\n                else if (checked) {\n                    newValue = newValue.concat(value);\n                }\n                else {\n                    const index = newValue.findIndex((v) => v === value);\n                    newValue.splice(index, 1);\n                }\n                this._trigger('change', { value: newValue, context: item });\n            },\n            initWithOptions() {\n                const { options, value } = this.data;\n                if (!(options === null || options === void 0 ? void 0 : options.length) || !Array.isArray(options))\n                    return;\n                const checkboxOptions = options.map((item) => {\n                    const isLabel = ['number', 'string'].includes(typeof item);\n                    return isLabel\n                        ? {\n                            label: `${item}`,\n                            value: item,\n                            checked: value === null || value === void 0 ? void 0 : value.includes(item),\n                        }\n                        : Object.assign(Object.assign({}, item), { checked: value === null || value === void 0 ? void 0 : value.includes(item.value) });\n                });\n                this.setData({\n                    checkboxOptions,\n                });\n            },\n            handleInnerChildChange(e) {\n                var _a;\n                const { item } = e.target.dataset;\n                const { checked } = e.detail;\n                const rect = {};\n                if (item.checkAll) {\n                    rect.indeterminate = (_a = this.$checkAll) === null || _a === void 0 ? void 0 : _a.data.indeterminate;\n                }\n                this.updateValue(Object.assign(Object.assign(Object.assign({}, item), { checked, item }), rect));\n            },\n            setCheckall() {\n                const items = this.getChildren();\n                if (!this.$checkAll) {\n                    this.$checkAll = items.find((item) => item.data.checkAll);\n                }\n                if (!this.$checkAll)\n                    return;\n                const { value } = this.data;\n                const valueSet = new Set(value === null || value === void 0 ? void 0 : value.filter((val) => val !== this.$checkAll.data.value));\n                const isCheckall = items.every((item) => (item.data.checkAll ? true : valueSet.has(item.data.value)));\n                this.$checkAll.setData({\n                    checked: valueSet.size > 0,\n                    indeterminate: !isCheckall,\n                });\n            },\n        };\n    }\n};\nCheckBoxGroup = __decorate([\n    wxComponent()\n], CheckBoxGroup);\nexport default CheckBoxGroup;\n"],"names":[],"sourceRoot":""}