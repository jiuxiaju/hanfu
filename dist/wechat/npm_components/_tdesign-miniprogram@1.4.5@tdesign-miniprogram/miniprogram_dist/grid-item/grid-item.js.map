{"version":3,"file":"npm_components/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/grid-item/grid-item.js","mappingssources":["webpack:///../node_modules/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/grid-item/grid-item.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent, isObject } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { uniqueFactory, setIcon } from '../common/utils';\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\nconst getUniqueID = uniqueFactory('grid_item');\nvar LinkTypes;\n(function (LinkTypes) {\n    LinkTypes[\"redirect-to\"] = \"redirectTo\";\n    LinkTypes[\"switch-tab\"] = \"switchTab\";\n    LinkTypes[\"relaunch\"] = \"reLaunch\";\n    LinkTypes[\"navigate-to\"] = \"navigateTo\";\n})(LinkTypes || (LinkTypes = {}));\nlet GridItem = class GridItem extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [\n            `${prefix}-class`,\n            `${prefix}-class-content`,\n            `${prefix}-class-image`,\n            `${prefix}-class-text`,\n            `${prefix}-class-description`,\n        ];\n        this.options = {\n            multipleSlots: true,\n        };\n        this.relations = {\n            '../grid/grid': {\n                type: 'ancestor',\n                linked(target) {\n                    this.parent = target;\n                    this.updateStyle();\n                    this.setData({\n                        column: target.data.column,\n                    });\n                },\n            },\n        };\n        this.properties = props;\n        this.data = {\n            prefix,\n            classPrefix: name,\n            gridItemStyle: '',\n            gridItemWrapperStyle: '',\n            gridItemContentStyle: '',\n            align: 'center',\n            column: 0,\n            describedbyID: '',\n        };\n        this.observers = {\n            icon(icon) {\n                const obj = setIcon('icon', icon, '');\n                this.setData(Object.assign({}, obj));\n            },\n        };\n        this.lifetimes = {\n            ready() {\n                this.setData({\n                    describedbyID: getUniqueID(),\n                });\n            },\n        };\n    }\n    updateStyle() {\n        const { hover, align } = this.parent.properties;\n        const gridItemStyles = [];\n        const gridItemWrapperStyles = [];\n        const gridItemContentStyles = [];\n        const widthStyle = this.getWidthStyle();\n        const paddingStyle = this.getPaddingStyle();\n        const borderStyle = this.getBorderStyle();\n        widthStyle && gridItemStyles.push(widthStyle);\n        paddingStyle && gridItemWrapperStyles.push(paddingStyle);\n        borderStyle && gridItemContentStyles.push(borderStyle);\n        this.setData({\n            gridItemStyle: `${gridItemStyles.join(';')}`,\n            gridItemWrapperStyle: gridItemWrapperStyles.join(';'),\n            gridItemContentStyle: gridItemContentStyles.join(';'),\n            hover,\n            layout: this.properties.layout,\n            align: align,\n        });\n    }\n    getWidthStyle() {\n        const { column } = this.parent.properties;\n        return column > 0 ? `width:${(1 / column) * 100}%` : '';\n    }\n    getPaddingStyle() {\n        const { gutter } = this.parent.properties;\n        if (gutter)\n            return `padding-left:${gutter}rpx;padding-top:${gutter}rpx`;\n        return '';\n    }\n    getBorderStyle() {\n        const { gutter } = this.parent.properties;\n        let { border } = this.parent.properties;\n        if (!border)\n            return '';\n        if (!isObject(border))\n            border = {};\n        const { color = '#266FE8', width = 2, style = 'solid' } = border;\n        if (gutter)\n            return `border:${width}rpx ${style} ${color}`;\n        return `border-top:${width}rpx ${style} ${color};border-left:${width}rpx ${style} ${color}`;\n    }\n    onClick(e) {\n        const { item } = e.currentTarget.dataset;\n        this.triggerEvent('click', item);\n        this.jumpLink();\n    }\n    jumpLink() {\n        const { url, jumpType } = this.properties;\n        if (url && jumpType) {\n            if (LinkTypes[jumpType]) {\n                wx[LinkTypes[jumpType]]({ url });\n            }\n        }\n    }\n};\nGridItem = __decorate([\n    wxComponent()\n], GridItem);\nexport default GridItem;\n"],"names":[],"sourceRoot":""}