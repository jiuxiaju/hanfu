{"version":3,"file":"npm_components/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/dropdown-item/dropdown-item.js","mappingssources":["webpack:///../node_modules/_tdesign-miniprogram@1.4.5@tdesign-miniprogram/miniprogram_dist/dropdown-item/dropdown-item.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport menuProps from '../dropdown-menu/props';\nimport { getRect } from '../common/utils';\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-item`;\nlet DropdownMenuItem = class DropdownMenuItem extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [\n            `${prefix}-class`,\n            `${prefix}-class-content`,\n            `${prefix}-class-column`,\n            `${prefix}-class-column-item`,\n            `${prefix}-class-column-item-label`,\n            `${prefix}-class-footer`,\n        ];\n        this.properties = Object.assign({}, props);\n        this.data = {\n            prefix,\n            classPrefix: name,\n            show: false,\n            top: 0,\n            maskHeight: 0,\n            initValue: null,\n            hasChanged: false,\n            duration: menuProps.duration.value,\n            zIndex: menuProps.zIndex.value,\n            overlay: menuProps.showOverlay.value,\n            labelAlias: 'label',\n            valueAlias: 'value',\n            computedLabel: '',\n            firstCheckedValue: '',\n        };\n        this.relations = {\n            '../dropdown-menu/dropdown-menu': {\n                type: 'parent',\n                linked(target) {\n                    const { zIndex, duration, showOverlay } = target.properties;\n                    this.setData({\n                        zIndex,\n                        duration,\n                        showOverlay,\n                    });\n                },\n            },\n        };\n        this.controlledProps = [\n            {\n                key: 'value',\n                event: 'change',\n            },\n        ];\n        this.observers = {\n            keys(obj) {\n                this.setData({\n                    labelAlias: obj.label || 'label',\n                    valueAlias: obj.value || 'value',\n                });\n            },\n            value(v) {\n                const { options, labelAlias, valueAlias } = this.data;\n                if (this.data.multiple) {\n                    if (!Array.isArray(v))\n                        throw TypeError('应传入数组类型的 value');\n                }\n                const target = options.find((item) => item[valueAlias] === v);\n                if (target) {\n                    this.setData({\n                        computedLabel: target[labelAlias],\n                    });\n                }\n            },\n            'label, computedLabel'() {\n                var _a;\n                (_a = this.$parent) === null || _a === void 0 ? void 0 : _a.getAllItems();\n            },\n            show(visible) {\n                if (visible) {\n                    this.getParentBottom(() => {\n                        this.setData({ wrapperVisible: true });\n                    });\n                }\n            },\n        };\n        this.methods = {\n            closeDropdown() {\n                var _a;\n                (_a = this.$parent) === null || _a === void 0 ? void 0 : _a.setData({\n                    activeIdx: -1,\n                });\n                this.setData({\n                    show: false,\n                });\n                this.triggerEvent('close');\n            },\n            getParentBottom(cb) {\n                getRect(this.$parent, `#${prefix}-bar`).then((rect) => {\n                    this.setData({\n                        top: rect.bottom,\n                        maskHeight: rect.top,\n                    }, cb);\n                });\n            },\n            handleTreeClick(e) {\n                const { level, value: itemValue } = e.currentTarget.dataset;\n                const { value } = this.data;\n                value[level] = itemValue;\n                this._trigger('change', { value });\n            },\n            handleRadioChange(e) {\n                const { value } = e.detail;\n                this._trigger('change', { value });\n                if (!this.data.multiple) {\n                    this.closeDropdown();\n                }\n                else {\n                    const firstChecked = this.data.options.find((item) => value.includes(item.value));\n                    if (firstChecked) {\n                        this.data.firstCheckedValue = firstChecked.value;\n                    }\n                }\n            },\n            handleMaskClick() {\n                var _a;\n                if ((_a = this.$parent) === null || _a === void 0 ? void 0 : _a.properties.closeOnClickOverlay) {\n                    this.closeDropdown();\n                }\n            },\n            handleReset() {\n                this._trigger('change', { value: [] });\n                this._trigger('reset');\n            },\n            handleConfirm() {\n                this._trigger('confirm', { value: this.data.value });\n                this.closeDropdown();\n                this.setData({ firstCheckedValue: this.data.firstCheckedValue });\n            },\n            onLeaved() {\n                this.setData({ wrapperVisible: false });\n            },\n        };\n    }\n};\nDropdownMenuItem = __decorate([\n    wxComponent()\n], DropdownMenuItem);\nexport default DropdownMenuItem;\n"],"names":[],"sourceRoot":""}