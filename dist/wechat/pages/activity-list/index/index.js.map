{"version":3,"file":"pages/activity-list/index/index.js","mappingssources":["webpack:///./pages/activity-list/index/index.ts"],"sourcesContent":["var __MOR_API__ = require('@morjs/api').mor;\n\nimport { __assign } from \"tslib\";\nimport { aPage } from '@ali/mor-core';\nimport dayjs from 'dayjs';\n// import area from './area'\nimport area from '/assets/area';\n// import { TRGNodeAny } from 'XrFrame/render-graph/RGNode'\n// 获取全局 app 实例\nvar app = getApp();\nfunction calculateStatus(startTime, endTime) {\n    var now = dayjs();\n    var start = dayjs(startTime);\n    var end = dayjs(endTime);\n    if (now.isBefore(start)) {\n        return '未开始'; // 活动尚未开始\n    }\n    else if (now.isAfter(end)) {\n        return '已结束'; // 活动已经结束\n    }\n    else {\n        return '进行中'; // 活动正在进行中\n    }\n}\nvar STATUS_KEY_MAP = {\n    '已结束': 3,\n    '未开始': 1,\n    '进行中': 2,\n};\naPage({\n    data: {\n        typeList: [\n            {\n                value: '',\n                label: '所有类型',\n            },\n            {\n                value: '1',\n                label: '文化体验类',\n            },\n            {\n                value: '2',\n                label: '教育研习类',\n            },\n            {\n                value: '3',\n                label: '社交联谊类',\n            },\n        ],\n        statusList: [\n            {\n                value: '',\n                label: '所有状态',\n            },\n            {\n                value: '未开始',\n                label: '未开始',\n            },\n            {\n                value: '进行中',\n                label: '进行中',\n            },\n            {\n                value: '已结束',\n                label: '已结束',\n            },\n        ],\n        showLoading: true,\n        provinceList: [],\n        filter: {\n            type: '',\n            status: '',\n            area: ['', ''],\n        },\n        value: ['0', '0-0'],\n        list: [],\n        area: ['', ''],\n        config: {\n            \"activity_set\": {\n                \"fields\": [\"detail\", \"address\"],\n                \"displayValuesOnly\": [\"detail\"],\n                \"fieldLabels\": { \"address\": \"地址\" }\n            },\n        },\n        displayList: [],\n        batchSize: 10,\n        currentDisplayCount: 0,\n        cardData: [],\n        rowColsAvatar: [{ size: '100px', type: 'circle' }],\n        rowColsImage: [{ size: '100px', type: 'rect' }],\n        rowColsContent: [{ width: '80%' }, { width: '100%' }, { width: '80%' }], // 定义骨架屏内容部分的占位\n    },\n    onLoad: function () {\n        this.getArea();\n        this.getActivityList();\n        this.getCurrentPagePath();\n    },\n    //分享给好友\n    onShareAppMessage: function () {\n        this.getCurrentPagePath();\n        var promise = new Promise(function (resolve) {\n            setTimeout(function () {\n                resolve({\n                    title: '九霞裾'\n                });\n            }, 20);\n        });\n        return {\n            title: '九霞裾',\n            path: '/pages/home',\n            promise: promise\n        };\n    },\n    //转发到朋友圈\n    onShareTimeline: function () {\n        return {\n            title: '快来看看'\n        };\n    },\n    onScrollViewScroll: function (e) {\n        var scrollTop = e.detail.scrollTop; // 用户当前已滚动的距离\n        var scrollHeight = e.detail.scrollHeight; // scroll-view 内容的总高度\n        var scrollViewHeight = 700; // scroll-view 的固定高度\n        var triggerHeight = 200; // 触发加载数据的提前量（距底部 200px）\n        // 检查是否接近底部，并触发数据加载\n        if (scrollTop + scrollViewHeight >= scrollHeight - triggerHeight) {\n            console.log('接近底部，加载更多数据...');\n            // this.loadMoreData();\n            this.onScrollToLower();\n        }\n    },\n    onScrollToLower: function () {\n        // 当滑动到页面底部时触发\n        console.log('我执行了');\n        var _a = this.data, list = _a.list, displayList = _a.displayList, currentDisplayCount = _a.currentDisplayCount, batchSize = _a.batchSize;\n        console.log(currentDisplayCount, 'currentDisplayCount');\n        var nextDisplayCount = currentDisplayCount + batchSize;\n        if (currentDisplayCount < list.length) {\n            // 有更多数据可以加载\n            var moreData = list.slice(currentDisplayCount, nextDisplayCount);\n            this.setData({\n                displayList: displayList.concat(moreData),\n                currentDisplayCount: nextDisplayCount, // 更新已显示的数据数量\n            });\n        }\n    },\n    getCurrentPagePath: function () {\n        var pages = getCurrentPages(); //获取加载的页面\n        var currentPage = pages[pages.length - 1]; //获取当前页面的对象\n        var url = \"/\" + currentPage.route; //当前页面url\n        console.log(url, 'url');\n        return url;\n    },\n    onPullDownRefresh: function () {\n        this.getActivityList({});\n    },\n    getArea: function () {\n        var provinceList = area.provinceList.map(function (province) { return ({\n            label: province.fullName,\n            value: province.fullName,\n            children: province.directCityList.map(function (city) { return ({\n                label: city.fullName,\n                value: city.fullName,\n            }); }),\n        }); });\n        this.setData({ provinceList: provinceList });\n    },\n    getActivityList: function (filter) {\n        var _this = this;\n        var requestParam = filter || this.data.filter;\n        if (!requestParam.type) {\n            delete requestParam.type;\n        }\n        if (!requestParam.status) {\n            delete requestParam.status;\n        }\n        // 调整area的入参格式\n        if (requestParam.area) {\n            requestParam.region = requestParam.area.join(',');\n        }\n        if (requestParam.region === ',') {\n            delete requestParam.region;\n        }\n        delete requestParam.area;\n        console.log(requestParam);\n        wx.cloud.callFunction({\n            name: 'onsearchActicity',\n            data: requestParam, // 携带的参数\n        }).then(function (res) {\n            var result = res.result.data; // 云函数返回的结果\n            console.log(result, 'result');\n            // 更新组件的 state\n            _this.setData({\n                list: result,\n                displayList: result.slice(0, _this.data.batchSize),\n                showLoading: false,\n                currentDisplayCount: 10,\n                config: res.result.config\n            });\n            // 打印处理后的数据列表\n            console.log('Updated Info List:', _this.data.displayList);\n        }).catch(function (error) {\n            console.error('Error calling cloud function:', error);\n            _this.setData({ showLoading: false }); // 处理错误时, 隐藏加载动画\n        });\n    },\n    onChangeTypeFilter: function (e) {\n        var filter = __assign(__assign({}, this.data.filter), { type: e.detail.value });\n        this.setData({ filter: filter });\n        this.getActivityList(filter);\n    },\n    onChangeStatusFilter: function (e) {\n        var filter = __assign(__assign({}, this.data.filter), { status: e.detail.value });\n        this.setData({ filter: filter });\n        this.getActivityList(filter);\n    },\n    onChangeAreaFilter: function (e) {\n        var value = e.detail.value;\n        this.setData({ area: value });\n    },\n    defaultTap: function () {\n        var filter = __assign(__assign({}, this.data.filter), { area: ['', ''] });\n        this.setData({ filter: filter, area: ['', ''] });\n        this.getActivityList(filter);\n        this.mockCloseDropDownMenu();\n    },\n    primaryTap: function () {\n        var filter = __assign(__assign({}, this.data.filter), { area: this.data.area });\n        this.setData({ filter: filter });\n        this.getActivityList(filter);\n        this.mockCloseDropDownMenu();\n    },\n    mockCloseDropDownMenu: function () {\n        var _a;\n        var drowItemRef = this.selectComponent('#test');\n        (_a = drowItemRef.$parent) === null || _a === void 0 ? void 0 : _a.setData({\n            activeIdx: -1,\n        });\n        drowItemRef.setData({\n            show: false,\n        });\n        drowItemRef.triggerEvent('close');\n    },\n    handleItemClick: function (event) {\n        var Item = event.detail;\n        console.log(Item._id, 'Item._id');\n        __MOR_API__.navigateTo({\n            url: \"/pages/activity-list/detail/index?activityId=\" + Item._id,\n        });\n    }\n});\n"],"names":[],"sourceRoot":""}