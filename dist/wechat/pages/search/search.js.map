{"version":3,"file":"pages/search/search.js","mappingssources":["webpack:///./pages/search/search.ts"],"sourcesContent":["var __MOR_API__ = require('@morjs/api').mor;\n\nimport { __spreadArray } from \"tslib\";\nimport { aPage } from '@ali/mor-core';\naPage({\n    data: {\n        image: 'https://tdesign.gtimg.com/mobile/demos/empty1.png',\n        query: '',\n        queryHistoryArr: [],\n        suggestions: [],\n        suggestionText: '',\n        showSuggestion: false,\n        suggestionLink: '',\n        suggestionMapping: [],\n        placeholders: ['汉服', '汉服运动', '北京'],\n        // currentPlaceholder: '汉服运动', // 当前显示的底纹词\n        currentPlaceholder: '',\n        mockData: null,\n        destRecs: {},\n        generalRecs: [],\n        currentTab: '',\n        text: '',\n        currentQuery: '',\n        currentText: '',\n        // currentTab: '' // 当前选中的 currentTab\n        SuggestedSearches: [],\n        placeholderWords: [\n            {\n                query: \"搜索推荐词...\",\n                updated: false,\n                text: \"\",\n                currentTab: \"\"\n            }\n        ]\n    },\n    onLoad: function () {\n        //热搜词\n        this.startPlaceholderUpdateTimer(); // 启动定期更新定时器\n        this.setDataFromGlobalData();\n        this.setPlaceholderWord();\n        var queryHistoryArr = __MOR_API__.getStorageSync({ key: 'queryHistory' }).data;\n        this.setData({ queryHistoryArr: queryHistoryArr || [] });\n        var that = this;\n        // 调用云函数 \n        wx.cloud.callFunction({\n            name: 'suggestion',\n            success: function (res) {\n                // 把获取到的数组赋值给页面数据中的mockData\n                var result = res.result;\n                console.log(result, 'result');\n                that.setData({\n                    recommendations: result.recommendations,\n                    combinedArray: result.combinedArray,\n                    suggestionMapping: result.simpleArray\n                });\n            },\n            fail: function (error) {\n                console.error('Cloud function call failed: ', error);\n            }\n        });\n        wx.cloud.callFunction({\n            name: 'SuggestedSearches',\n            data: {\n                queryHistoryArr: queryHistoryArr\n            },\n            success: function (res) {\n                // 把获取到的数组赋值给页面数据中的mockData\n                var result = res.result;\n                console.log(result, 'result111');\n                that.setData({\n                    SuggestedSearches: result\n                }, function () {\n                    that.refreshDiscoveries();\n                });\n            },\n            fail: function (error) {\n                console.error('Cloud function call failed: ', error);\n            }\n        });\n    },\n    setDataFromGlobalData: function () {\n        var app = getApp();\n        this.setData({\n            // queryHistoryArr: app.globalData.queryHistoryArr,\n            placeholderWords: app.globalData.placeholderWords\n        });\n        // 打印完整的 placeholderWords\n        console.log('页面加载时获得的 placeholderWords:', this.data.placeholderWords);\n    },\n    startPlaceholderUpdateTimer: function () {\n        var _this = this;\n        // 设置一个定时器，每隔 5 秒随机选择一个新的 placeholderWord\n        setInterval(function () {\n            _this.setPlaceholderWord();\n        }, 7000); // 每 5 秒更新一次\n    },\n    setPlaceholderWord: function () {\n        var placeholderWords = this.data.placeholderWords;\n        if (Array.isArray(placeholderWords) && placeholderWords.length > 0) {\n            var randomIndex = Math.floor(Math.random() * placeholderWords.length);\n            // this.setData({ placeholder: placeholderWords[randomIndex].text });\n            // // 打印选中的 placeholder\n            var selectedPlaceholder = placeholderWords[randomIndex];\n            this.setData({\n                placeholder: selectedPlaceholder.text,\n                currentQuery: selectedPlaceholder.query,\n                currentText: selectedPlaceholder.text,\n                currentTab: selectedPlaceholder.currentTab,\n                currentPlaceholder: selectedPlaceholder.text\n            });\n        }\n    },\n    filterRecommendations: function (query) {\n        var cityRecs = this.data.recommendations || [];\n        var generalRecs = this.data.combinedArray || [];\n        var filteredRecs = [];\n        // 精准匹配城市名的推荐项\n        var cityMatch = cityRecs.filter(function (rec) { return rec.query === query; });\n        // 其他联想推荐项\n        var generalMatch = generalRecs.filter(function (rec) { return rec.text.includes(query); });\n        // 合并两个结果集\n        filteredRecs = __spreadArray(__spreadArray([], cityMatch, true), generalMatch, true);\n        return filteredRecs;\n    },\n    // 转发好友\n    onShareAppMessage: function () {\n        var app = getApp(); // 获取全局应用实例\n        var promise = new Promise(function (resolve) {\n            app.generateShareInfo().then(function (shareInfo) {\n                // 在这里处理生成的分享信息\n                resolve(shareInfo);\n            });\n        });\n        return {\n            title: '九霞裾',\n            path: '/pages/home',\n            promise: promise\n        };\n    },\n    //转发到朋友圈\n    onShareTimeline: function () {\n        return {\n            title: '快来看看'\n        };\n    },\n    onUnload: function () {\n        // 清理定时器\n        if (this.placeholderTimer) {\n            clearInterval(this.placeholderTimer);\n        }\n    },\n    // 当输入框值发生变化时，更新查询词，并获取联想词\n    onInputChange: function (e) {\n        var query = e.detail.value;\n        this.setData({ query: query });\n        if (query.trim()) {\n            // this.getSuggestions(query);\n            // 处理联想词的部分\n            var suggestions = this.filterRecommendations(query);\n            console.log(suggestions, 'suggestions');\n            suggestions = suggestions.slice(0, 35);\n            this.setData({ suggestions: suggestions });\n        }\n        else {\n            // this.setData({ offlineSuggestions: [], onlineSuggestions: [] });\n            this.setData({ suggestions: [] });\n        }\n        // 调用封装好的方法，设置字段B的显示逻辑\n        this.checkAndShowSuggestion(query);\n    },\n    //清除query\n    onClearSearch: function () {\n        var _this = this;\n        this.setData({\n            query: '',\n            showSuggestion: false,\n            suggestions: ''\n        }, function () {\n            // 由于setData是异步操作，如果立刻获取可能还是旧值，所以在这个回调函数中打印确保是更新后的值\n            console.log(_this.data.showSuggestion); // 应该打印出 false\n        });\n    },\n    // 处理点击推荐项\n    onClickRecommendation: function (event) {\n        var query = event.currentTarget.dataset.item.query;\n        var currentTab = event.currentTarget.dataset.item.currentTab;\n        var text = event.currentTarget.dataset.item.text;\n        this.queryInfos(query, currentTab, text);\n        // 这里可以处理点击事件，比如导航到相应的页面\n    },\n    //处理搜索发现\n    refreshDiscoveries: function () {\n        this.setData({\n            displayDiscoveries: this.getRandomDiscoveries(this.data.SuggestedSearches)\n        });\n    },\n    onClickDiscover: function (event) {\n        var query = event.currentTarget.dataset.item.query;\n        var currentTab = event.currentTarget.dataset.item.currentTab;\n        var text = event.currentTarget.dataset.item.text;\n        this.queryInfos(query, currentTab, text);\n    },\n    // 一个封装好的方法，用以设置建议的可见性和内容\n    checkAndShowSuggestion: function (query) {\n        var matchingItem = this.data.suggestionMapping.find(function (item) { return item.fieldA === query; });\n        if (matchingItem) {\n            //在setData之前打印\n            this.setData({\n                suggestionText: matchingItem.fieldB,\n                suggestionLink: matchingItem.link,\n                showSuggestion: true\n            });\n        }\n        else {\n            //清除suggestion相关状态\n            this.setData({\n                showSuggestion: false,\n                suggestionText: '',\n                suggestionLink: ''\n            });\n        }\n    },\n    //跳转逻辑\n    onSuggestionTap: function () {\n        // 使用数据中保存的链接进行跳转\n        var suggestionLink = this.data.suggestionLink;\n        if (suggestionLink) {\n            __MOR_API__.navigateTo({ url: suggestionLink });\n        }\n    },\n    //搜索逻辑，跳转页面并且传参\n    queryInfos: function (query, currentTab, text) {\n        if (currentTab === void 0) { currentTab = '0'; }\n        if (text === void 0) { text = ''; }\n        console.log('query:', query, 'currentTab:', currentTab, text);\n        if (!text) {\n            text = query;\n        }\n        __MOR_API__.navigateTo({\n            url: \"/pages/result/result?query=\" + encodeURIComponent(query) + \"&currentTab=\" + currentTab + \"&text=\" + encodeURIComponent(text)\n        });\n        // 通常搜索后分清联想词列表\n        this.setData({ suggestions: [] });\n        // 调用更新搜索历史的方法\n        this.updateQueryHistory(query, currentTab, text);\n    },\n    handleSearch: function (query, currentTab, text) {\n        // 检查输入(query)是否为空\n        // if (!query) {\n        //   // 如果query为空，则显示一个提示信息告知用户输入不能空\n        //   my.alert({\n        //     title: '提示',\n        //     content: '请输入搜索关键词',\n        //   });\n        //   return;\n        // }\n        console.log(query, 'query-配置的');\n        // 在suggestionMapping数组中查找匹配项\n        var matchingItem = this.data.suggestionMapping.find(function (item) { return item.fieldA === query; });\n        console.log(matchingItem, 'matchingItem');\n        if (matchingItem) {\n            // 如果找到匹配项，导航到matchingItem指定的URL\n            __MOR_API__.navigateTo({\n                url: matchingItem.link\n            });\n        }\n        else {\n            // 如果没有找到匹配项，执行查询Infos逻辑显示搜索结果\n            this.queryInfos(query, currentTab, text);\n        }\n        // 更新查询历史记录，可能会将query加入到某个存储搜索历史的数组\n    },\n    getRandomDiscoveries: function (discoveries) {\n        // 假设我们获取5个随机的搜索发现\n        var randomDiscoveries = [];\n        var copyDiscoveries = __spreadArray([], discoveries, true);\n        var count = Math.min(6, copyDiscoveries.length);\n        for (var i = 0; i < count; i++) {\n            var randomIndex = Math.floor(Math.random() * copyDiscoveries.length);\n            randomDiscoveries.push(copyDiscoveries[randomIndex]);\n            copyDiscoveries.splice(randomIndex, 1); // 删除已经选中的元素，防止重复\n        }\n        return randomDiscoveries;\n    },\n    //提交按钮\n    onSubmitSearch: function (e) {\n        var query = e.detail.value.trim();\n        var searchQuery = query || this.data.currentPlaceholder; // 如果 query 为空，使用默认占位符\n        console.log('query', query);\n        var currentTab = this.data.currentTab;\n        var text = this.data.currentPlaceholder;\n        // this.handleSearch(searchQuery,currentTab,text);\n        if (query) {\n            // 用户输入了 query，使用用户输入的值进行搜索\n            this.handleSearch(searchQuery);\n        }\n        else {\n            // 用户没有输入 query，使用 currentPlaceholder 并传递当前的 currentTab 和 currentText\n            var query_1 = this.data.currentQuery;\n            this.handleSearch(query_1, currentTab, text);\n            console.log(query_1, currentTab, text, 'currentTab-onSubmitSearch');\n        }\n    },\n    // 更新历史搜索记录\n    updateQueryHistory: function (query, currentTab, text) {\n        if (currentTab === void 0) { currentTab = 0; }\n        if (text === void 0) { text = ''; }\n        console.log('updateQueryHistory:', query, currentTab, text); // 调试打印，确保参数接收\n        if (!query) {\n            return;\n        }\n        var queryHistoryArr = __spreadArray([], this.data.queryHistoryArr, true);\n        var existingIndex = queryHistoryArr.findIndex(function (item) { return item.query === query; });\n        if (existingIndex !== -1) {\n            queryHistoryArr.splice(existingIndex, 1);\n        }\n        // 当 currentTab 为默认值（没有值时），用 query 填充 text\n        if (currentTab === '0') {\n            text = query;\n        }\n        var app = getApp();\n        var newItem = { query: query, currentTab: currentTab, text: text };\n        console.log('New History Item:', newItem); // 调试打印新增项\n        var newLen = queryHistoryArr.unshift(newItem);\n        if (newLen > 50) {\n            queryHistoryArr.pop();\n        }\n        this.setData({ queryHistoryArr: queryHistoryArr });\n        app.globalData.queryHistoryArr = queryHistoryArr;\n        __MOR_API__.setStorage({\n            key: 'queryHistory',\n            data: queryHistoryArr,\n        });\n    },\n    //从历史记录里搜索\n    onSearchHistory: function (e) {\n        var item = e.currentTarget.dataset.item;\n        // const tab = e.currentTarget.dataset.item.tab;\n        console.log(item, 'item');\n        var query = item.query;\n        var currentTab = item.currentTab;\n        var text = item.text;\n        this.queryInfos(query, currentTab, text);\n    },\n    clearQueryHistory: function () {\n        // 清除本地存储中的搜索历史记录\n        __MOR_API__.removeStorageSync({ key: 'queryHistory' });\n        // 更新 data 中的搜索历史状态，如果需要在页面上响应显示\n        this.setData({\n            queryHistoryArr: [] // 假设这是页面 data 中用来存储搜索历史的数组\n        });\n    },\n});\n"],"names":[],"sourceRoot":""}