{"version":3,"file":"app.js","mappingssources":["webpack:///./app.ts"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { aApp } from '@ali/mor-core';\naApp({\n    globalData: {\n        placeholderWords: [{\n                query: \"搜索推荐词...\",\n                updated: false,\n                text: '',\n                currentTab: ''\n            },],\n        queryHistoryArr: [],\n        dataReady: false,\n        dataReadyCallback: null\n    },\n    onLaunch: function () {\n        var _this = this;\n        console.log(\"🚀 ~ file: app.ts:39 ~ onLaunch ~ onLaunch:\");\n        this.initCloud();\n        this.updatePlaceholderWord();\n        this.loadQueryHistory().then(function () {\n            console.log('我loadQueryHistory执行完了');\n            // 调用 updatePlaceholderWord 更新占位词\n            _this.updatePlaceholderWord();\n        }),\n            // 演示如何获取 queryHistoryArr\n            console.log('初始化时的 queryHistoryArr:', this.globalData.queryHistoryArr);\n        this.globalData.sysinfo = wx.getSystemInfoSync();\n        var updateManager = wx.getUpdateManager();\n        updateManager.onCheckForUpdate(function (res) {\n            // 请求完新版本信息的回调\n            console.log(res.hasUpdate);\n        });\n        updateManager.onUpdateReady(function () {\n            wx.showModal({\n                title: '更新提示',\n                content: '新版本已经准备好，是否重启应用？',\n                success: function (res) {\n                    if (res.confirm) {\n                        // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启\n                        updateManager.applyUpdate();\n                    }\n                }\n            });\n        });\n        updateManager.onUpdateFailed(function () {\n            // 新的版本下载失败\n            wx.showModal({\n                title: '更新提示',\n                content: '新版本下载失败',\n                showCancel: false\n            });\n        });\n    },\n    globalData: {\n        sysinfo: {},\n    },\n    loadQueryHistory: function () {\n        // 获取本地存储的历史记录\n        try {\n            var queryHistoryArr = wx.getStorageSync('queryHistory') || [];\n            this.globalData.queryHistoryArr = queryHistoryArr;\n        }\n        catch (e) {\n            console.error(\"Failed to load query history:\", e);\n        }\n    },\n    saveQueryHistory: function (queryHistoryArr) {\n        // 保存搜索历史记录到本地存储\n        try {\n            wx.setStorageSync('queryHistory', queryHistoryArr);\n            this.globalData.queryHistoryArr = queryHistoryArr;\n        }\n        catch (e) {\n            console.error(\"Failed to save query history:\", e);\n        }\n    },\n    updatePlaceholderWord: function () {\n        var _this = this;\n        var queryHistoryArr = this.globalData.queryHistoryArr;\n        console.log(queryHistoryArr, 'queryHistoryArr');\n        wx.cloud.callFunction({\n            name: 'getPlaceholderWords',\n            data: {\n                queryHistoryArr: queryHistoryArr\n            },\n            success: function (res) {\n                var result = res.result;\n                if (Array.isArray(result) && result.length > 0) {\n                    _this.globalData.placeholderWords = result.map(function (word) { return (__assign(__assign({}, word), { updated: true })); });\n                    // 标记数据已准备好，并调用回调函数\n                    _this.globalData.dataReady = true;\n                    if (_this.globalData.dataReadyCallback) {\n                        _this.globalData.dataReadyCallback();\n                    }\n                }\n                // 打印完整的 placeholderWord\n                console.log('更新后的 placeholderWord:', _this.globalData.placeholderWords);\n            },\n            fail: function (error) {\n                console.error('Cloud function call failed: ', error);\n            }\n        });\n    },\n    // 定义全局方法获取路径和参数\n    getCurrentPagePathWithArgs: function () {\n        var pages = getCurrentPages(); // 获取加载的页面\n        var currentPage = pages[pages.length - 1]; // 获取当前页面的对象\n        var url = \"/\" + currentPage.route; // 当前页面url\n        // 获取页面参数\n        var options = currentPage.options;\n        var queryParameters = Object.keys(options)\n            .map(function (key) { return key + \"=\" + options[key]; })\n            .join('&');\n        return url + \"?\" + queryParameters;\n    },\n    // 定义全局方法生成分享信息\n    generateShareInfo: function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var pathWithArgs = _this.getCurrentPagePathWithArgs(); // 获取当前页面的路径和参数\n            resolve({\n                title: '九霞裾',\n                path: pathWithArgs,\n                // imageUrl: '/path/to/share-image.jpg' // 分享的图片路径\n            });\n        });\n    },\n    initCloud: function () {\n        wx.cloud.init({\n            env: 'jiuxiaju-7ghefl5n6fc39431',\n        });\n        console.log(\"🚀 ~ file: app.ts:47 ~ initCloud ~ wx.cloud:\", wx.cloud);\n    },\n    /**\n     * 转换富文本text\n     * @param text\n     * @returns\n     */\n    convertRichText: function (text) {\n        if (text && typeof text === 'string') {\n            // 处理图片宽度\n            return text.replace(/<(img).*?(\\/>|<\\/img>)/g, function (mats) {\n                if (mats.indexOf('style') < 0) {\n                    return mats.replace(/<\\s*img/, '<img style=\"max-width:100%;height:auto;\"');\n                }\n                else {\n                    return mats.replace(/style=(\"|')/, 'style=$1max-width:100%;height:auto;');\n                }\n            });\n        }\n        return text;\n    },\n});\n"],"names":[],"sourceRoot":""}