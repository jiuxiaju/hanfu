{"version":3,"file":"components/cardList/index.js","mappingssources":["webpack:///./components/cardList/index.ts"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { aComponent } from '@ali/mor-core';\naComponent({\n    properties: {\n        // 定义组件的属性\n        config: {\n            type: Object,\n            value: {}\n        },\n        cardData: {\n            type: Object,\n            value: {},\n            observer: function (newVal) {\n                // 每次 `items` 变化时执行，这里可以处理逻辑\n                if (!newVal.hasOwnProperty('processed')) {\n                    this.setCardData(newVal);\n                }\n            }\n        },\n    },\n    data: {\n        formattedItem: {},\n        displayedItems: {},\n        infoValueStyle: '',\n        swiperMaxHeight: '',\n        imageClass: '',\n    },\n    observer: function () {\n    },\n    lifetimes: {\n        attached: function () {\n            // 组件实例进入页面节点树时触发\n            // this.setCardData();\n            this.printProps(); // 在组件布局完成后（含外层节点）打印 properties\n        },\n        detached: function () {\n            // 当组件实例被从页面节点中移除时执行\n            this.printProps(); // 在组件布局完成后（含外层节点）打印 properties\n        },\n        ready: function () {\n            // 假设这个生命周期表示渲染完成\n            this.triggerEvent('renderComplete', { id: this.data.cardData._id });\n        }\n    },\n    methods: {\n        onCardTap: function (event) {\n            // console.log(event, 'evu222en')\n            var item = this.properties.cardData;\n            this.triggerEvent('itemClick', item);\n        },\n        printProps: function () {\n            // const { config, cardData, mappingRules } = this.properties;\n            // console.log('Config:', config);\n            // console.log('Card Data:', cardData);\n            // console.log('Card mappingRules:', mappingRules);\n        },\n        // 定义组件的方法\n        /**\n * 设置卡片数据，根据当前时间调整每个卡片的状态。\n * 此函数处理cardData数组，根据每个项的source属性和当前时间，\n * 更新其状态，并根据配置信息格式化卡片的其他属性。\n */\n        setCardData: function () {\n            // 解构获取cardData和config数据\n            var _a = this.properties, cardData = _a.cardData, config = _a.config;\n            // 获取当前时间戳\n            console.log(cardData, 'cardData-cardData', config);\n            var currentTime = Date.now();\n            var processedData = __assign({}, cardData);\n            // 处理 activity_set 类型的 activityStatus \n            if (cardData.source === 'activity_set') {\n                if (cardData.startTime && cardData.endTime) {\n                    if (cardData.startTime > currentTime) {\n                        processedData.activityStatus = \"未开始\";\n                    }\n                    else if (cardData.endTime < currentTime) {\n                        processedData.activityStatus = \"已结束\";\n                    }\n                    else {\n                        processedData.activityStatus = \"进行中\";\n                    }\n                }\n                else {\n                    console.warn(\"Missing startTime or endTime for activity_set item\");\n                }\n            }\n            var selectedConfig = config[cardData.source];\n            // 格式化卡片项，包括标题、标志和信息\n            var formattedItem = {\n                title: cardData.title,\n                images: cardData.images,\n                info: config[cardData.source] ? this.processInfo(cardData, config[cardData.source]) : [],\n                activityStatus: processedData.activityStatus,\n                source: cardData.source,\n                style: cardData.style,\n                processed: true,\n                imageClass: this.generateImageClass(selectedConfig.imageStyles.width || '100%'),\n                _id: cardData._id,\n                shouldNavigate: cardData.shouldNavigate\n            };\n            this.setData({\n                infoValueStyle: this.generateInfoValueStyle(selectedConfig.infoValueStyles),\n                swiperMaxHeight: selectedConfig.logoSwiper.maxHeight, // 使用默认高度，必要时可进行条件判断切换\n            });\n            // 如果是 activity_set 类型且有开始和结束时间，添加日期范围信息\n            if (cardData.source === 'activity_set' && cardData.startTime && cardData.endTime) {\n                var dateInfo = this.formatDateRange(cardData.startTime, cardData.endTime);\n                formattedItem.info.push(dateInfo);\n            }\n            // 更新组件数据\n            this.setData({\n                processedInfo: formattedItem.info,\n                cardData: formattedItem,\n                formattedItem: formattedItem\n            });\n        },\n        /**\n         * 处理信息项，根据配置提取和格式化信息。\n         * @param item 待处理的信息对象。\n         * @param config 配置对象，包括需要提取的字段、显示策略、字段标签和样式。\n         * @returns 返回一个格式化后的信息数组，每个元素包含字段的标签、值、是否显示标签、样式和值是否为数组等信息。\n         */\n        //对info区域进行处理\n        processInfo: function (item, config) {\n            var _this = this;\n            if (config === void 0) { config = {}; }\n            // 解构配置对象，默认值包括空数组和空对象。\n            var _a = config.fields, fields = _a === void 0 ? [] : _a, _b = config.displayValuesOnly, displayValuesOnly = _b === void 0 ? [] : _b, _c = config.fieldLabels, fieldLabels = _c === void 0 ? {} : _c, _d = config.styles, styles = _d === void 0 ? {} : _d;\n            var infoArray = [];\n            fields.forEach(function (field) {\n                // 检查字段在item中是否存在且不为空\n                if (item.hasOwnProperty(field) && item[field] !== undefined && item[field] !== null) {\n                    var fieldValue = item[field];\n                    var label = fieldLabels[field] || \"\";\n                    var displayLabel = !displayValuesOnly.includes(field);\n                    // 根据字段和来源类型，处理富文本字段\n                    if ((field === 'detail' && (item.source === 'activity_set' || item.source === 'knowledge_set')) ||\n                        (field === 'article' && item.source === 'article')) {\n                        fieldValue = _this.getRitch(fieldValue); // 特殊处理富文本字段并截取前100个字符\n                    }\n                    // 合并默认样式和自定义样式\n                    var defaultStyles = {\n                        color: \"#000\", // 默认颜色\n                        // backgroundColor: '#fff' // 默认背景颜色\n                    };\n                    var customStyles = styles[field] || {};\n                    var combinedStyles = __assign(__assign({}, defaultStyles), customStyles);\n                    // 特殊处理store字段\n                    if (field === 'store') {\n                        infoArray.push({\n                            label: '店铺来源',\n                            value: item.store.label,\n                            displayLabel: displayLabel,\n                            styles: _this.convertStylesToString(combinedStyles),\n                            isArray: false,\n                            icon: item.store.icon || '' // 添加icon字段，值为item.icon\n                        });\n                    }\n                    else {\n                        // 添加处理后的字段信息到结果数组\n                        infoArray.push({\n                            label: label,\n                            value: fieldValue,\n                            displayLabel: displayLabel,\n                            styles: _this.convertStylesToString(combinedStyles),\n                            isArray: Array.isArray(fieldValue) // 标记是否为数组\n                        });\n                    }\n                }\n            });\n            return infoArray;\n        },\n        // 辅助函数: 将时间戳转换为格式化的日期字符串\n        formatDateRange: function (startTime, endTime) {\n            var startDate = new Date(startTime);\n            var endDate = new Date(endTime);\n            var formatDate = function (date) {\n                return date.getFullYear() + \"-\" + String(date.getMonth() + 1).padStart(2, '0') + \"-\" + String(date.getDate()).padStart(2, '0');\n            };\n            return {\n                label: \"日期\",\n                value: formatDate(startDate) + \"~\" + formatDate(endDate),\n                displayLabel: true,\n                styles: {}\n            };\n        },\n        // 辅助函数: 去除富文本的 HTML 标签并截取前100个字符\n        getRitch: function (rich) {\n            if (!rich)\n                return '';\n            var richClone = rich.replace(/<[^>]*>/g, '');\n            return richClone.slice(0, 100); // 截取前100个字符\n        },\n        // 转换样式对象为字符串\n        convertStylesToString: function (styles) {\n            return Object.entries(styles).map(function (_a) {\n                var key = _a[0], value = _a[1];\n                return key + \": \" + value;\n            }).join(\";\");\n        },\n        generateInfoValueStyle: function (styleConfig) {\n            return \"\\n              -webkit-line-clamp: \" + (styleConfig.lineClamp || 3) + \";\\n              line-height: \" + (styleConfig.lineHeight || '1.5em') + \";\\n              max-height: \" + (styleConfig.lineClamp ? parseFloat(styleConfig.lineHeight) * styleConfig.lineClamp + 'em' : '4.5em') + \";\\n            \";\n        },\n        generateImageClass: function (width) {\n            switch (width) {\n                case '100%':\n                    return 'logo-image-100';\n                case '70%':\n                    return 'logo-image-70';\n                default:\n                    console.warn(\"Unexpected image width: \" + width + \", falling back to 70%.\");\n                    return 'logo-image-100';\n            }\n        },\n        // 合并样式\n        mergeStyles: function (baseStyle, additionalStyle) {\n            return baseStyle + \" \" + additionalStyle;\n        }\n    },\n});\n"],"names":[],"sourceRoot":""}