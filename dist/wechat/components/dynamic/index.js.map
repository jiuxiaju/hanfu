{"version":3,"file":"components/dynamic/index.js","mappingssources":["webpack:///./components/dynamic/index.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\n// JavaScript (组件定义)\nimport { aComponent } from '@ali/mor-core';\naComponent({\n    properties: {\n        mergedData: {\n            type: Object,\n            value: {},\n            observer: function (newVal) {\n                // 每次 `items` 变化时执行，这里可以处理逻辑\n                if (!newVal.hasOwnProperty('processed')) {\n                    this.initializeTabs(); // 初始化标签\n                }\n            }\n        }\n    },\n    data: {\n        tabs: [],\n        totalTabs: 0,\n        selectedSingleValueTabs: [],\n        selectedTabs: [],\n        activeTab: null,\n        isPanelOpen: false,\n        selectedValues: {},\n        selectedItems: [],\n        finalValues: {},\n        hasSelectedItems: false,\n        singleValueTabs: [],\n        activeSingleValueTab: [], // 当前激活的单一值标签\n    },\n    lifetimes: {\n        attached: function () {\n        }\n    },\n    methods: {\n        // 初始化标签的方法\n        initializeTabs: function () {\n            var _this = this;\n            var mergedData = this.data.mergedData;\n            var fieldTranslations = mergedData.fieldTranslations;\n            var tabsData = mergedData.tabsData;\n            var tabs = [];\n            var singleValueTabs = [];\n            Object.keys(tabsData).forEach(function (key) {\n                var dataContent = tabsData[key];\n                // 仅处理非空的属性项\n                if (dataContent && dataContent.length > 0) {\n                    var translatedLabel = fieldTranslations[key] || key; // 使用字段映射\n                    if (dataContent.length === 1) {\n                        singleValueTabs.push({\n                            label: translatedLabel,\n                            content: dataContent[0],\n                            value: key // 保留原始键值\n                        });\n                    }\n                    else {\n                        tabs.push({\n                            label: translatedLabel,\n                            content: _this.chunkArray(dataContent, 3),\n                            value: key // 保留原始键值\n                        });\n                    }\n                }\n            });\n            var totalTabs = singleValueTabs.length + tabs.length;\n            this.setData({\n                tabs: tabs,\n                singleValueTabs: singleValueTabs,\n                totalTabs: totalTabs\n            });\n        },\n        // 将数组分块的方法\n        chunkArray: function (myArray, chunk_size) {\n            var tempArray = [];\n            for (var index = 0; index < myArray.length; index += chunk_size) {\n                var myChunk = myArray.slice(index, index + chunk_size);\n                tempArray.push(myChunk);\n            }\n            return tempArray;\n        },\n        // 处理单个值标签点击事件\n        onSingleValueTabClick: function (event) {\n            var _a = event.currentTarget.dataset, value = _a.value, content = _a.content;\n            var _b = this.data, finalValues = _b.finalValues, _c = _b.selectedSingleValueTabs, selectedSingleValueTabs = _c === void 0 ? [] : _c; // 默认值为空数组\n            if (selectedSingleValueTabs.includes(value)) {\n                // 如果当前选项已被选中，再次点击时重置为未选中状态\n                var updatedSelectedSingleValueTabs = selectedSingleValueTabs.filter(function (item) { return item !== value; });\n                delete finalValues[value];\n                this.setData({\n                    finalValues: finalValues,\n                    selectedSingleValueTabs: updatedSelectedSingleValueTabs\n                });\n            }\n            else {\n                // 否则，将选中的值添加到finalValues并更新为选中状态\n                selectedSingleValueTabs.push(value);\n                finalValues[value] = content;\n                this.setData({\n                    finalValues: finalValues,\n                    selectedSingleValueTabs: selectedSingleValueTabs\n                });\n            }\n            this.onDynamicFilter(finalValues);\n        },\n        // 处理多项标签点击事件\n        // 处理多项标签点击事件\n        onTabClick: function (event) {\n            var _a = this.data, tabs = _a.tabs, finalValues = _a.finalValues, selectedItems = _a.selectedItems, selectedValues = _a.selectedValues;\n            var clickedTabValue = event.currentTarget.dataset.value; // 获取点击的标签的label\n            console.log(selectedValues, 'selectedValues');\n            if (this.data.activeTab === clickedTabValue) {\n                // 如果点击的标签是当前激活的标签，则关闭选项区域\n                this.setData({\n                    activeTab: null,\n                    isPanelOpen: false,\n                    selectedItems: [],\n                    hasSelectedItems: false\n                });\n            }\n            else {\n                // 每次重新打开标签时，都从 finalValues 初始化 selectedValues\n                var newSelectedValues = __assign({}, selectedValues);\n                newSelectedValues[clickedTabValue] = __spreadArray([], (finalValues[clickedTabValue] || []), true);\n                var previousActiveTab = this.data.activeTab;\n                // 清空未确认的选项\n                if (previousActiveTab) {\n                    selectedValues[previousActiveTab] = finalValues[previousActiveTab] || [];\n                }\n                this.setData({\n                    activeTab: clickedTabValue,\n                    isPanelOpen: true,\n                    selectedItems: newSelectedValues[clickedTabValue],\n                    hasSelectedItems: (newSelectedValues[clickedTabValue] || []).length > 0,\n                    selectedValues: newSelectedValues,\n                });\n            }\n        },\n        closePanel: function () {\n            this.setData({\n                activeTab: null,\n                isPanelOpen: false\n            });\n        },\n        // 处理项目选择事件\n        // 处理项目选择事件\n        onItemSelect: function (event) {\n            var value = event.currentTarget.dataset.value;\n            var _a = this.data, activeTab = _a.activeTab, selectedValues = _a.selectedValues;\n            var currentAttribute = activeTab;\n            var selectedItems = selectedValues[currentAttribute] || [];\n            console.log(selectedItems, 'selectedItems');\n            var index = selectedItems.indexOf(value);\n            if (index > -1) {\n                selectedItems.splice(index, 1); // 移除已选项\n            }\n            else {\n                selectedItems.push(value); // 添加新选项\n            }\n            selectedValues[currentAttribute] = selectedItems;\n            console.log(selectedValues, 'selectedValues', selectedItems);\n            this.setData({\n                selectedItems: selectedItems,\n                selectedValues: selectedValues,\n                hasSelectedItems: selectedItems.length > 0\n            });\n        },\n        // 重置选择项的方法\n        // 重置选择项的方法\n        onReset: function () {\n            var _a = this.data, activeTab = _a.activeTab, selectedValues = _a.selectedValues, finalValues = _a.finalValues;\n            var currentAttribute = activeTab;\n            // 清空当前标签的选择项\n            selectedValues[currentAttribute] = [];\n            // 更新最终结果对象\n            finalValues[currentAttribute] = [];\n            this.setData({\n                currentAttribute: currentAttribute,\n                selectedValues: __assign({}, selectedValues),\n                finalValues: __assign({}, finalValues),\n                hasSelectedItems: Object.values(this.data.finalValues).some(function (arr) { return arr.length > 0; }),\n                selectedItems: []\n            });\n            this.onDynamicFilter(finalValues);\n            console.log(finalValues, 'finalValues-finalValues', this.data.selectedItems);\n        },\n        // 确认选择的方法\n        onConfirm: function () {\n            var _a = this.data, selectedValues = _a.selectedValues, finalValues = _a.finalValues;\n            // 将当前的键值对添加到最终结果对象\n            Object.keys(selectedValues).forEach(function (key) {\n                finalValues[key] = selectedValues[key];\n            });\n            this.setData({\n                finalValues: finalValues,\n                selectedItems: [],\n            });\n            this.closePanel(); // 关闭面板\n            this.onDynamicFilter(finalValues);\n        },\n        onDynamicFilter: function () {\n            this.triggerEvent('dynamicData', this.data.finalValues);\n        }\n    }\n});\n"],"names":[],"sourceRoot":""}